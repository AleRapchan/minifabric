#!/bin/bash
# Script to instantiate chaincode
export CORE_PEER_TLS_ROOTCERT_FILE=/vars/keyfiles/peerOrganizations/{{ peer.org }}/peers/{{ peer.fullname }}/tls/ca.crt
export CORE_PEER_TLS_KEY_FILE=/vars/keyfiles/peerOrganizations/{{ peer.org }}/peers/{{ peer.fullname }}/tls/server.key
export CORE_PEER_LOCALMSPID={{ peer.org.split('.')|join('') }}
export CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
export CORE_PEER_TLS_CERT_FILE=/vars/keyfiles/peerOrganizations/{{ peer.org }}/peers/{{ peer.fullname }}/tls/server.crt
export CORE_PEER_TLS_ENABLED=true
export CORE_PEER_MSPCONFIGPATH=/vars/keyfiles/peerOrganizations/{{ peer.org }}/users/Admin@{{ peer.org }}/msp
export CORE_PEER_ID=cli
export CORE_PEER_ADDRESS={{ peer.fullname }}:7051
export ORDERER_TLS_CA=/vars/keyfiles/ordererOrganizations/{{ orderer.org}}/orderers/{{ orderer.fullname }}/tls/ca.crt
export ORDERER_ADDRESS={{ orderer.fullname }}:7050

peer chaincode invoke -o {{ orderer.fullname }}:7050 --cafile $ORDERER_TLS_CA \
  -C {{CHANNEL_NAME}} --tls true -n {{ CC_NAME }}  \
{% for anorg in orgpeers.keys() %}
{%   set onepeer = (orgpeers[anorg]|random) %}
  --peerAddresses {{ onepeer }}:7051 \
  --tlsRootCertFiles /vars/keyfiles/peerOrganizations/{{ anorg }}/peers/{{ onepeer }}/tls/ca.crt \
{% endfor %}
{% if TRANSIENT_DATA != 'Cg==' %}
  --transient '{{ TRANSIENT_DATA|b64decode|trim }}' \
{% endif %}
  -c '{"Args":[{{ CC_PARAMETERS|b64decode|trim }}]}'
